inductive ListFunctor (Œ± œÅ : Type _) : Type _
  | nil
  | cons (hd : Œ±) (cons : œÅ)

namespace ListFunctor
inductive Crystal {base : Type u} :
    {n : Nat} ‚Üí
    {m : Nat} ‚Üí
    n.repeat (ListFunctor.{u} Œ±) base ‚Üí
    m.repeat (ListFunctor.{u} Œ±) base ‚Üí Prop where
  | base  : @Crystal _ _ (0    ) (m + 1) b v
  | nilS  : @Crystal _ _ (n + 1) (m + 1) .nil .nil
  | consS : @Crystal _ _ (n    ) (m    ) t‚ÇÅ   t‚ÇÇ ‚Üí
            @Crystal _ _ (n + 1) (m + 1) (.cons h‚ÇÅ t‚ÇÅ) (.cons h‚ÇÅ t‚ÇÇ)

namespace Crystal
def cons
    {obj : (n : Nat) ‚Üí n.repeat (ListFunctor Œ±) Unit}
    (cryst : ‚àÄ (n : Nat), ListFunctor.Crystal (obj n) (obj n.succ))
    (h : obj 1 = ListFunctor.cons hd PUnit.unit)
    : (x : Nat) ‚Üí ‚àÉ tl, obj x.succ = ListFunctor.cons hd tl
  | 0 => by
    have := cryst 1
    cases h' : obj 2 <;> simp_all [h', h] <;> cases this
    exact ‚ü®_, rfl‚ü©

  | n+1 => by
    have ‚ü®tl', h‚ü© := Crystal.cons cryst h n
    have := cryst (n+1)
    cases h' : obj (n+2) <;> simp_all [h', h]
    <;> cases this
    exact ‚ü®_, rfl‚ü©

def nil
    {obj : (n : Nat) ‚Üí n.repeat (ListFunctor Œ±) Unit}
    (cryst : ‚àÄ (n : Nat), ListFunctor.Crystal (obj n) (obj n.succ))
    (h : obj 1 = .nil)
    : (x : Nat) ‚Üí obj x.succ = .nil
  | 0 => by
    have := cryst 1
    cases h' : obj 2 <;> simp_all [h', h]
  | n+1 => by
    have := cryst (n+1)
    cases h' : obj (n+2) <;> rw [h', nil cryst h n] at this
    cases this
end Crystal
end ListFunctor

structure CoList (Œ± : Type u) : Type u where
  obj : (n : Nat) ‚Üí n.repeat (ListFunctor Œ±) PUnit
  cryst : ‚àÄ n, ListFunctor.Crystal (obj n) (obj n.succ)

namespace CoList
def dest (o : CoList Œ±) : ListFunctor Œ± (CoList Œ±) :=
  let ‚ü®obj, cryst‚ü© := o
  match h‚ÇÅ : obj 1 with
  | .nil => .nil
  | .cons hd .unit =>
    .cons hd ‚ü®
      (fun x => match h‚ÇÇ : obj x.succ with
      | .cons _ tl => tl
      | .nil => ListFunctor.Crystal.cons cryst h‚ÇÅ x
          |> Exists.choose_spec 
          |>.symm.trans h‚ÇÇ
          |> ListFunctor.noConfusion
      ),
      fun n => by
        dsimp
        split
        <;> rename_i heq‚ÇÅ
        case h_2 =>
          exact ListFunctor.Crystal.cons cryst h‚ÇÅ n
            |> Exists.choose_spec
            |>.symm.trans heq‚ÇÅ
            |> ListFunctor.noConfusion 
        have ‚ü®_, p‚ü© := ListFunctor.Crystal.cons cryst h‚ÇÅ n.succ 
        split
        <;> rename_i heq‚ÇÇ
        case h_2 =>
          exact ListFunctor.noConfusion $ p.symm.trans heq‚ÇÇ
        have := cryst n.succ
        rw [heq‚ÇÅ, heq‚ÇÇ] at this
        clear h‚ÇÅ
        exact match this with | .consS x => x
    ‚ü©

def corec.impl
    {Œ± : Type v} {œÅ : Type u}
    (f : œÅ ‚Üí ListFunctor Œ± œÅ) (content : œÅ)
    : (x : Nat) ‚Üí x.repeat (ListFunctor Œ±) PUnit.{v+1}
  | 0 => .unit
  | _+1 => match f content with
    | .nil => .nil
    | .cons hd tl => .cons hd (impl f tl _)

-- TODO: Add the concept of an indexer type to make co-rec generation much faster (hopefully)
-- No, turns out this is a fundemental failure of progressive generation.
-- This can be fixed though, or at least made linear which should make scaling less insane.
-- To do this we need eacg approximation to become exponentially better than the last.
-- With this done the amortized cost will become ùìû(n)

def corec.proof : ‚àÄ (x : Nat), ListFunctor.Crystal (impl f v x) (impl f v x.succ)
  | 0 => .base
  | n+1 => by
    dsimp [corec.impl]
    match f v with
    | .nil      => exact .nilS
    | .cons _ _ => exact .consS $ corec.proof n

def corec {Œ± : Type v} {œÅ : Type u} (f : œÅ ‚Üí ListFunctor Œ± œÅ) (v : œÅ) : CoList Œ± :=
  ‚ü®corec.impl f v, corec.proof‚ü©

-- This will be the base of a quotient for efficent generators
structure PerfBase (Œ± : Type u) : Type (max u v + 1) where
  {dom   : Type v}
  (init  : dom)
  (coalg : dom ‚Üí ListFunctor Œ± dom)

namespace PerfBase

def dest : PerfBase Œ± ‚Üí ListFunctor Œ± (PerfBase Œ±)
  | ‚ü®init, coalg‚ü© => match coalg init with
    | .nil => .nil
    | .cons hd tl => .cons hd ‚ü®tl, coalg‚ü©

/- inductive Bisim.Invariant' (R : PerfBase Œ± ‚Üí PerfBase Œ± ‚Üí Prop) : ListFunctor Œ± (PerfBase Œ±) ‚Üí ListFunctor Œ± (PerfBase Œ±) ‚Üí Prop -/
/-   | cons : R t‚ÇÅ t‚ÇÇ ‚Üí Invariant' R (.cons h t‚ÇÅ) (.cons h t‚ÇÇ) -/
/-   | nil : Invariant' R .nil .nil -/

/- def Bisim.Invariant (R : PerfBase Œ± ‚Üí PerfBase Œ± ‚Üí Prop) (a b : PerfBase Œ±) : Prop := -/
/-   Invariant' R a.dest b.dest -/

inductive Bisim.Invariant (R : PerfBase Œ± ‚Üí PerfBase Œ± ‚Üí Prop) : PerfBase Œ± ‚Üí PerfBase Œ± ‚Üí Prop
  | cons : l‚ÇÅ.dest = (.cons h t‚ÇÅ) ‚Üí l‚ÇÇ.dest = (.cons h t‚ÇÇ) ‚Üí R t‚ÇÅ t‚ÇÇ ‚Üí Invariant R l‚ÇÅ l‚ÇÇ
  | nil : l‚ÇÅ.dest = .nil ‚Üí l‚ÇÇ.dest = .nil ‚Üí Invariant R l‚ÇÅ l‚ÇÇ

abbrev Bisim.Is (R : PerfBase Œ± ‚Üí PerfBase Œ± ‚Üí Prop) : Prop :=
  ‚àÄ {x y}, R x y ‚Üí Bisim.Invariant R x y

def Bisim (a b : PerfBase Œ±) : Prop :=
  ‚àÉ R, Bisim.Is R ‚àß R a b

theorem Bisim.unfold {Œ±}: @Bisim.Is Œ± Bisim := fun ‚ü®R, h_is, h_Rst‚ü© =>
  match h_is h_Rst with
  | .cons hA hB h => .cons hA hB ‚ü®R, h_is, h‚ü©
  | .nil hA hB => .nil hA hB

theorem Bisim.refl : Bisim a a := by
  refine ‚ü®Eq, ?_, rfl‚ü©
  rintro x _ rfl
  cases h : x.dest
  ¬∑ exact .nil h h
  ¬∑ exact .cons h h rfl

theorem Bisim.symm (h : Bisim a b) : Bisim b a := by
  rcases h with ‚ü®rel, relIsBisim, rab‚ü©
  refine ‚ü®fun a b => rel b a, fun holds => ?_, rab‚ü©
  cases relIsBisim holds
  case cons h eqa eqb => exact .cons eqb eqa h
  case nil eqa eqb => exact .nil eqb eqa

theorem Bisim.trans {a b c : PerfBase Œ±} (h_ab : Bisim a b) (h_bc : Bisim b c) :
    Bisim a c := by
  refine ‚ü®(fun s t => ‚àÉ u, Bisim s u ‚àß Bisim u t), fun ‚ü®m, hx, hy‚ü© => ?_, ‚ü®_, h_ab, h_bc‚ü©‚ü©
  cases hx.unfold <;> cases hy.unfold
  any_goals (simp_all only; done)
  case cons hx hl hm‚ÇÅ _ _ _ hy hm‚ÇÇ hr =>
    obtain ‚ü®rfl, rfl‚ü© := (ListFunctor.cons.injEq _ _ _ _).mp $ hm‚ÇÅ.symm.trans hm‚ÇÇ
    exact .cons hl hr ‚ü®_, hx, hy‚ü©
  case nil hl _ hm hr => 
    exact .nil hl hr

instance instSetoid Œ± : Setoid (PerfBase Œ±) where
  r := Bisim
  iseqv := {
    refl  := fun _ => Bisim.refl
    symm  := Bisim.symm
    trans := Bisim.trans
  }

def Perf (Œ± : Type _) := Quotient (instSetoid Œ±)


