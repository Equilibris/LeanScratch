import Mathlib.Logic.Equiv.Defs
import Mathlib.Tactic

inductive ListFunctor (Œ± œÅ : Type _) : Type _
  | nil
  | cons (hd : Œ±) (tl : œÅ)

namespace ListFunctor
inductive Crystal {Œ± : Type v} {base : Type (max u v)} :
    {n : Nat} ‚Üí
    {m : Nat} ‚Üí
    n.repeat (ListFunctor.{v, max u v} Œ±) base ‚Üí
    m.repeat (ListFunctor.{v, max u v} Œ±) base ‚Üí Prop where
  | base  :         @Crystal _ _ (0    ) (m + 1) b v
  | nilS  : n ‚â§ m ‚Üí @Crystal _ _ (n + 1) (m + 1) .nil .nil
  | consS :         @Crystal _ _ (n    ) (m    ) t‚ÇÅ   t‚ÇÇ ‚Üí
                    @Crystal _ _ (n + 1) (m + 1) (.cons h‚ÇÅ t‚ÇÅ) (.cons h‚ÇÅ t‚ÇÇ)

def Crystal.order {base}
    : {n m : Nat} ‚Üí
    {a : n.repeat (ListFunctor.{v, max u v} Œ±) base} ‚Üí
    {b : m.repeat (ListFunctor.{v, max u v} Œ±) base} ‚Üí
    Crystal a b ‚Üí n ‚â§ m
  | 0, m+1, _, _, .base => by exact Nat.le_add_left 0 (m + 1)
  | _+1, _+1, .nil, .nil, .nilS h => Nat.add_le_add_right h _
  | _+1, _+1, .cons _ _, .cons _ _, .consS h => Nat.add_le_add_right (order h) 1

def Crystal.trans
    {base : Type _}
    : {n m k : Nat} ‚Üí
    {a : n.repeat (ListFunctor.{v, max u v} Œ±) base} ‚Üí
    {b : m.repeat (ListFunctor.{v, max u v} Œ±) base} ‚Üí
    {c : k.repeat (ListFunctor.{v, max u v} Œ±) base} ‚Üí
    Crystal a b ‚Üí Crystal b c ‚Üí Crystal a c
  | _+1, _+1, _+1, .cons _ _, .cons _ _, .cons _ _, .consS hx, .consS hy =>
    .consS $ Crystal.trans hx hy
  | _+1, _+1, _+1, _, _, _, .nilS hx, .nilS hy =>
    .nilS $ Nat.le_trans hx hy
  | 0, _+1, _+1, _, _, _, .base, _ => .base

def Crystal.zero_up_gen
    {f : Nat ‚Üí Nat}
    {obj : (n : Nat) ‚Üí (f n).repeat (ListFunctor Œ±) Unit}
    (cryst : ‚àÄ (n : Nat), ListFunctor.Crystal (obj n) (obj n.succ))
    : (n : Nat) ‚Üí Crystal (obj 0) (obj n.succ)
  | n+1 => Crystal.zero_up_gen cryst n |>.trans $ cryst _
  | 0   => cryst 0

def Crystal.frwd_gen
    {f : Nat ‚Üí Nat}
    {obj : (n : Nat) ‚Üí (f n).repeat (ListFunctor Œ±) Unit}
    (cryst : ‚àÄ (n : Nat), ListFunctor.Crystal (obj n) (obj n.succ))
    : (a b : Nat) ‚Üí a < b ‚Üí Crystal (obj a) (obj b)
  | a+1, b+1, h => frwd_gen
    (f := f ‚àò Nat.succ)
    (obj := (obj ¬∑.succ))
    (cryst ¬∑.succ) a b
    (Nat.succ_lt_succ_iff.mp h)
  | 0,   _+1, _ => zero_up_gen cryst _

abbrev Crystal.frwd
    {obj : (n : Nat) ‚Üí n.repeat (ListFunctor Œ±) Unit}
    : (‚àÄ (n : Nat), ListFunctor.Crystal (obj n) (obj n.succ)) ‚Üí
    (a b : Nat) ‚Üí a < b ‚Üí Crystal (obj a) (obj b) := frwd_gen

namespace Crystal
def cons
    {obj : (n : ‚Ñï) ‚Üí n.repeat (ListFunctor Œ±) Unit}
    (cryst : ‚àÄ (n : ‚Ñï), ListFunctor.Crystal (obj n) (obj n.succ))
    (h : obj 1 = ListFunctor.cons hd PUnit.unit)
    : (x : ‚Ñï) ‚Üí ‚àÉ tl, obj x.succ = ListFunctor.cons hd tl
  | 0 => by
    have := cryst 1
    cases h' : obj 2 <;> simp_all [h', h]
  | n+1 => by
    have ‚ü®tl', h‚ü© := Crystal.cons cryst h n
    have := cryst (n+1)
    cases h' : obj (n+2) <;> simp_all [h', h]
    <;> cases this
    exact ‚ü®_, rfl‚ü©

def nil
    {obj : (n : ‚Ñï) ‚Üí n.repeat (ListFunctor Œ±) Unit}
    (cryst : ‚àÄ (n : ‚Ñï), ListFunctor.Crystal (obj n) (obj n.succ))
    (h : obj 1 = .nil)
    : (x : Nat) ‚Üí obj x.succ = .nil
  | 0 => by
    have := cryst 1
    cases h' : obj 2 <;> simp_all [h', h]
  | n+1 => by
    have := cryst (n+1)
    cases h' : obj (n+2)
    <;> rw [h', nil cryst h n] at this
    clear h h'
    cases this
end Crystal

def Tight {Œ±} {x : Nat} (v : x.succ.repeat (ListFunctor Œ±) Empty) : Prop :=
  ¬¨‚àÉ (y : x.repeat _ _), (Crystal y v)
end ListFunctor

structure List' (Œ± : Type _) where
  bound : Nat
  content : bound.succ.repeat (ListFunctor Œ±) Empty
  tightness : ListFunctor.Tight content

def List'.lift : {n : Nat} ‚Üí n.repeat (ListFunctor Œ±) Empty ‚Üí List' Œ±
  | _+1, .nil => ‚ü®0, .nil, Empty.elim ‚àò Exists.choose‚ü©
  | n+1, .cons hd tl =>
    let ‚ü®n, v, tight‚ü© := List'.lift tl
    ‚ü®n+1, .cons hd v, fun ‚ü®w, p‚ü© => by cases p; exact tight ‚ü®_ , (by assumption)‚ü©‚ü©

def List'.cons : Œ± ‚Üí List' Œ± ‚Üí List' Œ±
  | hd, ‚ü®n, tl, tight‚ü© => ‚ü®
    n+1,
    .cons hd tl,
    fun ‚ü®w, p‚ü© => match p with | .consS v => tight ‚ü®_ , v‚ü©‚ü©

def List'.nil : List' Œ± := ‚ü®0, .nil, Empty.elim ‚àò Exists.choose‚ü©

def List'.dest : List' Œ± ‚Üí ListFunctor Œ± (List' Œ±)
  | ‚ü®0, .nil, _‚ü© | ‚ü®_+1, .nil, _‚ü© => .nil
  | ‚ü®_+1, .cons hd tl, _‚ü© => .cons hd $ List'.lift tl

/- def List'.ind -/
/-     {motive : List' Œ± ‚Üí Sort _} -/
/-     (hNil : motive .nil) -/
/-     (hCons : (hd : Œ±) ‚Üí (x : List' Œ±) ‚Üí motive x ‚Üí motive (.cons hd x)) -/
/-     (ls : List' Œ±) -/
/-     : motive ls := -/
/-   let ‚ü®n, v, tight‚ü© := ls -/
/-   dec n v tight -/
/-   where -/
/-     dec (n : Nat) (v : nApply _ _ n.succ) tight := match n, v with -/
/-     | 0, .nil => hNil -/
/-     | n+1, .nil => False.elim $ tight ‚ü®.nil , .nilS‚ü© -/
/-     | n+1, .cons hd tl => hCons hd (List'.lift tl) sorry -/

/- instance : Equiv (List Œ±) (List' Œ±) where -/
/-   toFun := sorry -/


structure CoList (Œ± : Type _) where
  obj : (n : Nat) ‚Üí n.repeat (ListFunctor Œ±) Unit
  cryst : ‚àÄ n, ListFunctor.Crystal (obj n) (obj n.succ)

-- This will in the end be the only efficent way to walk the graph sadly, and a bit pathalogically
def CoList.destN {n : Nat} (o : CoList Œ±) : n.repeat (ListFunctor Œ±) (CoList Œ±) :=
  let ‚ü®obj, cryst‚ü© := o
  let struct := obj n
  walker struct
where
  walker : {k : Nat} ‚Üí k.repeat _ _ ‚Üí k.repeat _ _
  | 0, _ => sorry
  | n+1, .nil => sorry
  | n+1, .cons _ _ => sorry

def CoList.dest (o : CoList Œ±) : ListFunctor Œ± (CoList Œ±) :=
  let ‚ü®obj, cryst‚ü© := o
  match h‚ÇÅ : obj 1 with
  | .nil => .nil
  | .cons hd .unit =>
    .cons hd ‚ü®
      (fun x => match h‚ÇÇ : obj x.succ with
      | .cons _ tl => tl
      | .nil => 
        have := ListFunctor.Crystal.frwd cryst 1 x.succ (by exact?)
        sorry
        /- ListFunctor.Crystal.cons cryst h‚ÇÅ x -/
        /-   |> Exists.choose_spec  -/
        /-   |>.symm.trans h‚ÇÇ -/
        /-   |> ListFunctor.noConfusion -/
      ),
      fun n => by
        dsimp
        split
        <;> rename_i heq‚ÇÅ
        case h_2 =>
          sorry
          /- exact ListFunctor.Crystal.cons cryst h‚ÇÅ n -/
          /-   |> Exists.choose_spec -/
          /-   |>.symm.trans heq‚ÇÅ -/
          /-   |> ListFunctor.noConfusion  -/
        have ‚ü®_, p‚ü© := ListFunctor.Crystal.cons cryst h‚ÇÅ n.succ 
        split
        <;> rename_i heq‚ÇÇ
        case h_2 =>
          exact ListFunctor.noConfusion $ p.symm.trans heq‚ÇÇ
        have := cryst n.succ
        rw [heq‚ÇÅ, heq‚ÇÇ] at this
        clear *-this
        exact match this with | .consS x => x
    ‚ü©

def CoList.corec.impl
    (f : œÅ ‚Üí ListFunctor Œ± œÅ) (content : œÅ) 
    : (x : ‚Ñï) ‚Üí x.repeat (ListFunctor Œ±) Unit
  | 0 => .unit
  | _+1 => match f content with
    | .nil => .nil
    | .cons hd tl => .cons hd (impl f tl _)

-- TODO: Add the concept of an indexer type to make co-rec generation much faster (hopefully)
-- No, turns out this is a fundemental failure of progressive generation.
-- This can be fixed though, or at least made linear which should make scaling less insane.
-- To do this we need eacg approximation to become exponentially better than the last.
-- With this done the amortized cost will become ùìû(n)

def CoList.corec.proof : ‚àÄ (x : ‚Ñï), ListFunctor.Crystal (impl f v x) (impl f v x.succ)
  | 0 => .base
  | n+1 => by
    dsimp [corec.impl]
    match f v with
    | .nil      => exact .nilS  $ Nat.le_add_right n 1
    | .cons _ _ => exact .consS $ corec.proof n

def CoList.corec (f : œÅ ‚Üí ListFunctor Œ± œÅ) (v : œÅ) : CoList Œ± :=
  ‚ü®corec.impl f v, corec.proof‚ü©

abbrev TLs (l : List Type) : Type :=
  l.foldl Prod Unit

class SimpleCtorsND (t : Type _) where
  ctors : List $ (arg : Type _) √ó (arg ‚Üí t)

class SimpleCasesND (t : Type) extends SimpleCtorsND t where
  cases {motive : t ‚Üí Type} :
    ((ctors.map
      (fun ‚ü®args, ctor‚ü© => (x : args) ‚Üí motive (ctor x))).foldl Prod Unit) ‚Üí ((x : t) ‚Üí motive x)

def takeList (l : CoList Œ±) : Nat ‚Üí List Œ±
  | 0 => []
  | n+1 =>
    match l.dest with
    | .nil => []
    | .cons hd tl => hd :: takeList tl n

#reduce takeList (CoList.corec (fun x => .cons x x.succ) 0) 99

